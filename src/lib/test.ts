export interface Operator {
  operatorCode: string;
  operatorName: string;
}
export interface Seller {
  sellerName: string;
  sellerCode: string;
  storeType?: any;
  dealStoreId: string;
}
export interface Finance {
  shipPrice: number;
  presentPrice: number;
  totalPrice: number;
  totalTradePrivilegePrice: number;
  totalMarketingScore: number;
  offsetScoreRate: number;
  totalPaidPrice?: any;
  mustPayPrice: number;
  totalExchangedScoreNum: number;
  totalCouponPrice: number;
  giftBalancePrice?: any;
  totalOffsetGiftCardPrice: number;
  totalCutDownPrice: number;
  totalExchangedScorePrice: number;
  settleRefundPrice: number;
  totalCostPrice: number;
  refundOffsetGiftCardPrice?: any;
  income?: any;
  refundOffsetScorePrice: number;
  thisTimeActualRefundablePrice?: any;
  totalItemPrice: number;
  totalOffsetScoreNum: number;
  totalPayPrice: number;
  balancePrice: number;
  invoicePrice: number;
  ysfDiscount?: any;
  returnOffsetScorePrice: number;
  totalRefundPrice: number;
  tid: string;
  totalBuyPrice: number;
  totalRetailPrice: number;
  acctRefundPrice: number;
  refundBalancePrice?: any;
  surplusScore: number;
  returnOffsetScore: number;
  totalOffsetScorePrice: number;
  totalPresentScore: number;
  surplusBalance: number;
  serviceFee?: any;
  refundOffsetScoreNum: number;
  refundSettlePrice: number;
  sellerChangePrice?: any;
}
export interface Finance {
  presentScore: number;
  initItemNum: number;
  beforeModifiedBuyPrice?: any;
  totalPaidPrice?: any;
  payPrice: number;
  totalExchangedScoreNum: number;
  exchangedScorePrice: number;
  returnedItemNum: number;
  totalItemPrivilegePrice: number;
  conversionNum?: any;
  retailPrice: number;
  totalExchangedScorePrice: number;
  viewUnit?: any;
  totalCostPrice: number;
  costPrice: number;
  itemNum: number;
  extInfo?: any;
  totalPayPrice: number;
  totalCutDownPrice: number;
  beforePayItemNum: number;
  exchangedScoreNum: number;
  totalSupplyPrice?: any;
  totalBuyPrice: number;
  totalRetailPrice: number;
  supplyPrice?: any;
  viewItemPrice?: any;
  totalPresentScore: number;
  buyPrice: number;
  viewUnitNum?: any;
  modifyPrice?: any;
  cutDownPrice: number;
  payTypeId?: any;
  buyPriceModified: boolean;
}
export interface ItemOrder {
  itemType: string;
  spuId: string;
  attribute?: any;
  extraGroupId?: any;
  serialNosList?: any;
  roomId?: any;
  unit?: any;
  finance: Finance;
  warehouseId?: any;
  skuPic?: any;
  specification?: any;
  note?: any;
  tid: string;
  spuName: string;
  packagesId?: any;
  specificationDetail?: any;
  guideId?: any;
  skuId: string;
  categoryName?: any;
  brand?: any;
  oid: string;
  warehouseBinId?: any;
  extraGroupPosition?: any;
  packages: boolean;
  createTime: string;
  itemOrderPerformances: any[];
  remark?: any;
  showed: boolean;
  gift: boolean;
  skuName: string;
  skuBn: string;
  barCode?: any;
  subItemType?: any;
  overSell: boolean;
  commented: boolean;
}
export interface Payment {
  payGateCode?: any;
  payId?: any;
  payGateName?: any;
  payTypeId: string;
  shopNo?: any;
  payBankName?: any;
  payTypeName: string;
  payBankCode?: any;
  payTime?: any;
  payGateNo: string;
  lklTermId?: any;
}
export interface Buyer {
  mobile: string;
  userId: string;
  nickName: string;
  snsId: string;
}
export interface TradeAble {
  passAuditable: boolean;
  cancelable: boolean;
  logisticsModifiable: boolean;
  retryRefundable4GrouponNotSuccess: boolean;
  notPassAuditable: boolean;
  remarkModifiable: boolean;
  auditCancelable: boolean;
  retryRefundable: boolean;
  signable: boolean;
  refundable: boolean;
  acceptable: boolean;
  offlineRefundable: boolean;
  returnable: boolean;
  invoicable: boolean;
  refundAppliable: boolean;
  cancelDeliveryable: boolean;
  priceModifiable: boolean;
  confirmAble: boolean;
  payStatusModifiable: boolean;
  changeToSelfDeliverable: boolean;
  returnAppliable: boolean;
  shippedLogisticsModifiable: boolean;
  offlineRefundable4GrouponNotSuccess: boolean;
  deliverable: boolean;
  returnReceivable: boolean;
  payConfirmable: boolean;
  completable: boolean;
  rejectable: boolean;
}
export interface TradeAbleBuyer {
  applyRefundCancelable: boolean;
  confirmable: boolean;
  applying: boolean;
  refundAppliable: boolean;
  returnAppliable: boolean;
  creatable: boolean;
  commentable: boolean;
  cancelable: boolean;
  payable: boolean;
  applyReturnCancelable: boolean;
  logisticsViewable: boolean;
}
export interface Root {
  consigneeTid?: any;
  logistics?: any;
  plaza?: any;
  shipTime?: any;
  outerTid?: any;
  tradeOffsetRecords: any[];
  confirmStatus?: any;
  consignee?: any;
  scene: string;
  sellerMark?: any;
  dinerNum?: any;
  cancelTime?: any;
  offlineTid?: any;
  invoice?: any;
  exceptionHandleTime?: any;
  operator: Operator;
  sceneType: string;
  tourGroupInfo?: any;
  receiveReceiptInfos: any[];
  salesman?: any;
  shipAddress?: any;
  invoiced: boolean;
  bookingStartTime?: any;
  tradeType: string;
  tms?: any;
  partPay: boolean;
  completeStatus: string;
  tableNo?: any;
  autoConfirmTime?: any;
  headStore?: any;
  logisticsList?: any;
  sellerTotalStatus: string;
  seller: Seller;
  refundStatus: string;
  deviceType: string;
  bookingEndTime?: any;
  lastReturnTime?: any;
  modifyTime: string;
  tid: string;
  returnAllowTime?: any;
  fromIp: string;
  buyerMark?: any;
  settleStatus?: any;
  inOms: boolean;
  buyerTotalStatus?: any;
  returnStatus: string;
  finance: Finance;
  returnAddress?: any;
  itemOrders: ItemOrder[];
  payment: Payment;
  communityGroupon?: any;
  giftCardRecords: any[];
  needInvoice: boolean;
  daySeq?: any;
  extendType?: any;
  endTime?: any;
  deviceId: string;
  shipStatus?: any;
  itemOrderNum: number;
  buyer: Buyer;
  autoCloseTime?: any;
  subTradeType: string;
  tradeAble: TradeAble;
  tradeUrl?: any;
  exceptionStatus?: any;
  goodsType?: any;
  sellerOperableInfo?: any;
  payingAgent?: any;
  groupon?: any;
  auditStatus: string;
  createTime: string;
  offlineCreateTime?: any;
  tradeAbleBuyer: TradeAbleBuyer;
  commented: boolean;
  autoConfirmSeconds?: any;
  _adminId: string;
  tableId?: any;
  checkStatus: string;
  applies?: any;
  tradeOptionalInfo?: any;
  tradeSecondPrivileges: any[];
  payStatus: string;
  region?: any;
}
export interface RootObject {
  total: number;
  root: Root[];
}
